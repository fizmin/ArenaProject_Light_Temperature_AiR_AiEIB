#include <Wire.h>       //Bibliotekta obsÅ‚ugujÄ…ca komunikacjÄ™ I2C
#include <U8g2lib.h>    // Biblioteka do obsÅ‚ugi wyÅ›wietlacza OLED
#include <ModbusRTU.h>   // Biblioteka implementujÄ…ca protokÃ³Å‚ Modbus RTU
#include "loraRadio.h"   // ObsÅ‚uga radia LoRa (fizyczna warstwa komunikacji)
#include "loraEncryption.h"   // Biblioteka szyfrowania wiadomoÅ›ci
#include "loraTransport.h"    // ObsÅ‚uga protokoÅ‚u transportowego (ramki, ACK)

#define SLAVE_ID 1    // Identyfikator odbiornika w sieci Modbus (adres slave)
#define PIN_BUTTON 4  // Pin przycisku wybudzajÄ…cego wyÅ›wietlacz 

// Utworzenie obiektu portu szeregowego dla Modbus (uÅ¼ywany UART1 ESP32)
HardwareSerial ModbusSerial(1);
ModbusRTU mb; // Obiekt protokoÅ‚u Modbus

// Obiekt wyÅ›wietlacza OLED 128x64 z kontrolerem SSD1306
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE);

// Zmienne globalne
float lastTemp = 0.0;   // Ostatnia odebrana temperatura (Â°C)
float lastHum = 0.0;    // Ostatnia odebrana wilgotnoÅ›Ä‡ (%)
float lastVolt = 0.0;   // Ostatnie odebrane napiÄ™cie baterii (V)
int batteryPercent = 0;   // Procent baterii nadajnika w %
bool displayActive = false;  // Flaga, czy ekran jest aktywny
unsigned long displayStartTime = 0;  // Czas aktywacji ekranu
uint16_t data[3] = {0, 0, 0};   // Tablica danych do wysyÅ‚ki przez Modbus (temperatura, wilgotnoÅ›Ä‡, bateria)


void setup() {      // Funkcja setup
  Serial.begin(115200);    // Uruchomienie monitora szeregowego (debug)
  ModbusSerial.begin(19200, SERIAL_8N1, 13, 14);  // Inicjalizacja komunikacji Modbus RTU (prÄ™dkoÅ›Ä‡ 19200, format 8N1, RX=13, TX=14)
  mb.begin(&ModbusSerial);    // Start stosu Modbus
  mb.slave(SLAVE_ID);   // Ustawienie adresu slave = 1
  mb.addHreg(100);      // Rejestr Holding Register dla temperatury
  mb.addHreg(101);      // Rejestr dla wilgotnoÅ›ci
  mb.addHreg(102);      // Rejestr dla stanu baterii

 // Inicjalizacja komunikacji radiowej LoRa
  if (!Lora::Radio::init()) {
    Serial.println("BÅ‚Ä…d inicjalizacji radia");
    while (1);    // Zatrzymaj pracÄ™, jeÅ›li radio siÄ™ nie uruchomiÅ‚o
  }
  Lora::Encryption::init(); // Uruchomienie moduÅ‚u szyfrowania AES
  Lora::start_radio();      // Start procesu nasÅ‚uchiwania pakietÃ³w

  pinMode(PIN_BUTTON, INPUT_PULLUP); // Konfiguracja pinu przycisku (aktywny po zwarciu do GND)
  u8g2.begin(); // Inicjalizacja wyÅ›wietlacza OLED
}

void loop() {   //Funkcja loop
  mb.task();    // ObsÅ‚uga Å¼Ä…daÅ„ Modbus (konieczne do dziaÅ‚ania protokoÅ‚u)

  uint8_t buf[64];   // Bufor na odebrane dane
  uint8_t size = 0;  // Rozmiar odebranej wiadomoÅ›ci
  uint8_t sender = 3; // Adres nadawcy (czujnik temperatury)

  // PrÃ³ba odbioru pakietu LoRa
  if (Lora::try_receive(&sender, buf, &size) == Lora::RECEIVED) {
    // Debug: wypisanie adresÃ³w ramki
    Serial.print("DEST_ADDR: "); Serial.println(buf[FRAME_POS_DEST_ADDR]);
    Serial.print("NEXT_ADDR: "); Serial.println(buf[FRAME_POS_NEXT_ADDR]);
    Serial.print("SEND_ADDR: "); Serial.println(buf[FRAME_POS_SEND_ADDR]);
    Serial.print("ğŸ“¡ Odebrano pakiet od "); Serial.println(sender);

    // Deszyfrowanie danych (ciÄ…g znakÃ³w ASCII do 16 bajtÃ³w)
    char decrypted[17];
    memcpy(decrypted, buf, min(size, (uint8_t)16));
    decrypted[16] = '\0'; // Dodanie znaku koÅ„ca stringa

    // Rozpakowanie danych (format: temperatura, wilgotnoÅ›Ä‡, napiÄ™cie)
    sscanf(decrypted, "%5f%5f%5f", &lastTemp, &lastHum, &lastVolt);
    batteryPercent = (int)(((lastVolt - 2.82) / (3.93 - 2.82)) * 100.0);  // Obliczenie poziomu baterii w procentach

    Serial.print("Dane: "); Serial.println(decrypted); // Debug: wyÅ›wietlenie odebranych danych
  }

  // ObsÅ‚uga przycisku â€“ wÅ‚Ä…czenie wyÅ›wietlacza po naciÅ›niÄ™ciu
  if (digitalRead(PIN_BUTTON) == LOW) {
    displayActive = true;
    displayStartTime = millis();  // Zapisz czas wÅ‚Ä…czenia
  }

  // JeÅ›li wyÅ›wietlacz aktywny â€“ pokaÅ¼ dane
  if (displayActive) {
    u8g2.clearBuffer();                 // WyczyÅ›Ä‡ bufor ekranu
    u8g2.setFont(u8g2_font_ncenB08_tr); // Ustaw czcionkÄ™

    // NagÅ‚Ã³wek w zaleÅ¼noÅ›ci od stanu baterii
    u8g2.setCursor(0, 16);
    if (batteryPercent > 20)
      u8g2.print("Ostatni odczyt:");
    else
      u8g2.print("NISKI POZ. BATERII");
    
    // WyÅ›wietlanie temperatury
    u8g2.setCursor(0, 32);  u8g2.print("Temp: "); u8g2.print(lastTemp); u8g2.print(" C");

    // WyÅ›wietlanie wilgotnoÅ›ci
    u8g2.setCursor(0, 48);u8g2.print("Wilg: "); u8g2.print(lastHum); u8g2.print(" %");

    // WyÅ›wietlanie napiÄ™cia i procentu baterii
    u8g2.setCursor(0, 64);  u8g2.print("Bateria: "); u8g2.print(lastVolt, 2);
    u8g2.print("V ("); u8g2.print(batteryPercent); u8g2.print("%)");

    u8g2.sendBuffer();  // PrzeÅ›lij zawartoÅ›Ä‡ bufora do wyÅ›wietlacza
  }

  // WyÅ‚Ä…czenie wyÅ›wietlacza po 5 sekundach
  if (displayActive && millis() - displayStartTime > 5000) {
    displayActive = false;
    u8g2.clearDisplay(); // WyczyÅ›Ä‡ ekran
  }
  // Przygotowanie danych do Modbus (int16 -> *100 dla zachowania czÄ™Å›ci dziesiÄ™tnej)
  data[0] = (uint16_t)(lastTemp * 100);  // np. 23.45Â°C zapisane jako 2345
  data[1] = (uint16_t)(lastHum * 100);  // np. 56.78% zapisane jako 5678
  data[2] = batteryPercent;            // Poziom baterii w %

  // WysÅ‚anie danych do rejestrÃ³w Modbus
  mb.Hreg(100, data[0]); // temperatura
  mb.Hreg(101, data[1]); // wilgotnoÅ›Ä‡
  mb.Hreg(102, data[2]); // bateria

  delay(500);   // KrÃ³tka przerwa (zmniejsza obciÄ…Å¼enie procesora)
}
